from pyspark.sql import SparkSession
from pyspark.sql.functions import col, struct, pandas_udf
from pyspark.sql.types import DoubleType, ArrayType
import pandas as pd
import pickle
import numpy as np
from catboost import CatBoostRegressor, CatBoostClassifier
from pyspark.sql.functions import broadcast

# Initialize Spark session
spark = SparkSession.builder.appName("CatBoost_Scoring").getOrCreate()

# Load the serialized model
with open("catboost_model.pkl", "rb") as f:
    catboost_model = pickle.load(f)

# Broadcast the model
broadcast_model = spark.sparkContext.broadcast(catboost_model)

# Define the Pandas UDF for scoring
@pandas_udf(DoubleType())  # Adjust type if classification (IntType for class labels)
def predict_udf(*features: pd.Series) -> pd.Series:
    model = broadcast_model.value  # Access broadcasted model
    feature_matrix = np.column_stack(features)  # Convert to 2D NumPy array
    return pd.Series(model.predict(feature_matrix))  # Predict

# Load input data (Assume a DataFrame `df` with 100 columns)
df = spark.read.parquet("input_data.parquet")

# Define the 20 feature columns
feature_cols = ["feature1", "feature2", ..., "feature20"]  # Replace with actual names

# Apply the UDF for prediction
df = df.withColumn("prediction", predict_udf(*[col(c) for c in feature_cols]))

# Save results
df.write.parquet("scored_output.parquet")
